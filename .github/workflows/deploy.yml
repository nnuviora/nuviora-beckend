name: Deploy Docker App to EC2

on:
  push:
    branches:
      - dev

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # потрібно для git diff

      - name: Set up SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.AWS_KEY }}" > ~/.ssh/aws_key.pem
          chmod 600 ~/.ssh/aws_key.pem
          ssh-keyscan -H ${{ secrets.AWS_HOST }} >> ~/.ssh/known_hosts

      - name: Check if SRC folder has changed
        id: check_src
        run: |
          if [ $(git rev-list --count HEAD) -eq 1 ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            if git diff --name-only HEAD~1 HEAD | grep '^SRC/'; then
              echo "changed=true" >> $GITHUB_OUTPUT
            else
              echo "changed=false" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Copy files to EC2
        if: steps.check_src.outputs.changed == 'true'
        run: |
          rsync -avz --delete --checksum -e "ssh -i ~/.ssh/aws_key.pem -o StrictHostKeyChecking=no" ./ ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }}:/home/ubuntu/nuviora_backend

      - name: Debug file structure on EC2
        if: steps.check_src.outputs.changed == 'true'
        run: |
          ssh -i ~/.ssh/aws_key.pem -o StrictHostKeyChecking=no ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << 'EOF'
            echo "==> Files in SRC:"
            ls -l /home/ubuntu/nuviora_backend/SRC

            echo "==> Recently modified files in SRC:"
            find /home/ubuntu/nuviora_backend/SRC -type f -printf '%TY-%Tm-%Td %TH:%TM %p\n' | sort -r | head -5
          EOF

      - name: Rebuild and restart fastapi container
        if: steps.check_src.outputs.changed == 'true'
        run: |
          ssh -i ~/.ssh/aws_key.pem -o StrictHostKeyChecking=no ${{ secrets.AWS_USER }}@${{ secrets.AWS_HOST }} << 'EOF'
            cd /home/ubuntu/nuviora_backend

            echo "==> Stopping fastapi container..."
            docker-compose stop fastapi || true

            echo "==> Removing old fastapi container..."
            docker-compose rm -f fastapi || true

            echo "==> Rebuilding fastapi container with no cache..."
            docker-compose build --no-cache fastapi

            echo "==> Starting fastapi container..."
            docker-compose up -d fastapi
          EOF
